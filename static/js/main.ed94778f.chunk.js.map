{"version":3,"sources":["component/TodoList/TodoItem.js","component/TodoList/TodoList.js","component/ClickMe/index.js","component/ColorBox/index.js","App.js","reportWebVitals.js","index.js"],"names":["TodoItem","props","onClick","deleteItem","id","listItem","TodoList","useState","listTodo","setListTodo","handleDelete","newlistTodo","splice","type","onKeyDown","e","which","text","target","value","todoText","title","v4","unshift","placeholder","map","todo","index","ClickMe","parseInt","localStorage","getItem","count","setCount","newCount","setItem","ColorBox","color","setColor","className","colorNow","color_box","Math","floor","random","console","log","changeColorRandom","style","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAEe,SAASA,EAASC,GAC/B,OACE,8BACE,oBAAIC,QAAS,kBAAMD,EAAME,WAAWF,EAAMG,KAA1C,SAAgDH,EAAMI,a,kBCA7C,SAASC,IAAY,IAAD,EACDC,mBAAS,IADR,mBAC1BC,EAD0B,KAChBC,EADgB,KAgB3BC,EAAe,SAACN,GACpB,IAAMO,EAAW,YAAOH,GACxBG,EAAYC,OAAOR,EAAI,GACvBK,EAAYE,IAGd,OACE,qCACE,2CACA,uBAAOE,KAAK,OAAOC,UAvBF,SAACC,GACpB,GAAgB,KAAZA,EAAEC,MAAN,CACE,IAAMC,EAAOF,EAAEG,OAAOC,MACtB,GAAIF,EAAM,CACR,IAAMG,EAAW,CAAEC,MAAOJ,EAAMb,GAAIkB,gBAC9BX,EAAW,YAAOH,GACxBG,EAAYY,QAAQH,GACpBX,EAAYE,GACZI,EAAEG,OAAOC,MAAQ,MAeyBK,YAAY,cACxD,6BACGhB,EAASiB,KAAI,SAACC,EAAMC,GACnB,OACE,cAAC3B,EAAD,CAEEI,GAAIuB,EACJtB,SAAUqB,EAAKL,MACflB,WAAYO,GAHPgB,EAAKtB,Y,MChCT,SAASwB,IAAW,IAAD,EACNrB,oBAAS,WAEjC,OADmBsB,SAASC,aAAaC,QAAQ,aAAe,KAFlC,mBACzBC,EADyB,KAClBC,EADkB,KAgBhC,OACE,gCACE,mDAAsBD,KACtB,wBAAQnB,KAAK,SAASX,QARF,WACtB,IAAMgC,EAAWF,EAAQ,EACzBC,EAASC,GACTJ,aAAaK,QAAQ,UAAWD,IAK9B,wBAGA,wBAAQrB,KAAK,SAASX,QAjBF,WACtB,IAAMgC,EAAWF,EAAQ,EACzBC,EAASC,GACTJ,aAAaK,QAAQ,UAAWD,IAc9B,2B,MCfS,SAASE,IAAY,IAAD,EACP7B,oBAAS,WAEjC,OADkBuB,aAAaC,QAAQ,cAAgB,cAFxB,mBAC1BM,EAD0B,KACnBC,EADmB,KAWjC,OACE,qBACEC,UAAU,MACVrC,QARwB,WAC1B,IAAMsC,EAdgB,WACxB,IACMC,EADa,CAAC,WAAY,QAAS,SAAU,QAAS,QAC/BC,KAAKC,MAAsB,EAAhBD,KAAKE,WAE7C,OADAC,QAAQC,IAAIJ,KAAKC,MAAsB,EAAhBD,KAAKE,WACrBH,EAUYM,GACjBT,EAASE,GACTV,aAAaK,QAAQ,YAAaK,IAMhCQ,MAAO,CAAEC,gBAAiBZ,KCVjBa,MAVf,WACE,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCESY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ed94778f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function TodoItem(props) {\n  return (\n    <div>\n      <li onClick={() => props.deleteItem(props.id)}>{props.listItem}</li>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport { v4 } from \"uuid\";\nimport \"./TodoList.css\";\n\nexport default function TodoList() {\n  const [listTodo, setListTodo] = useState([]);\n  const handleSubmit = (e) => {\n    if (e.which === 13) {\n      const text = e.target.value;\n      if (text) {\n        const todoText = { title: text, id: v4() };\n        const newlistTodo = [...listTodo];\n        newlistTodo.unshift(todoText);\n        setListTodo(newlistTodo);\n        e.target.value = \"\";\n      }\n    } else {\n      return;\n    }\n  };\n  const handleDelete = (id) => {\n    const newlistTodo = [...listTodo];\n    newlistTodo.splice(id, 1);\n    setListTodo(newlistTodo);\n  };\n\n  return (\n    <>\n      <h2>Todo List</h2>\n      <input type=\"text\" onKeyDown={handleSubmit} placeholder=\"Nhap ....\" />\n      <ul>\n        {listTodo.map((todo, index) => {\n          return (\n            <TodoItem\n              key={todo.id}\n              id={index}\n              listItem={todo.title}\n              deleteItem={handleDelete}\n            />\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./ClickMe.css\";\n\nexport default function ClickMe() {\n  const [count, setCount] = useState(() => {\n    const countFirst = parseInt(localStorage.getItem(\"clicked\")) || 0;\n    return countFirst;\n  });\n  const clickButtonTang = () => {\n    const newCount = count + 1;\n    setCount(newCount);\n    localStorage.setItem(\"clicked\", newCount);\n  };\n\n  const clickButtonGiam = () => {\n    const newCount = count - 1;\n    setCount(newCount);\n    localStorage.setItem(\"clicked\", newCount);\n  };\n  return (\n    <div>\n      <h2>So lan click la: {count}</h2>\n      <button type=\"button\" onClick={clickButtonGiam}>\n        Click Giam\n      </button>\n      <button type=\"button\" onClick={clickButtonTang}>\n        Click Tang\n      </button>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./ColorBox.css\";\n\nconst changeColorRandom = () => {\n  const colors_box = [\"deeppink\", \"green\", \"yellow\", \"black\", \"blue\"];\n  const color_box = colors_box[Math.floor(Math.random() * 4)];\n  console.log(Math.floor(Math.random() * 5));\n  return color_box;\n};\n\nexport default function ColorBox() {\n  const [color, setColor] = useState(() => {\n    const fistColor = localStorage.getItem(\"color_box\") || \"deeppink\";\n    return fistColor;\n  });\n\n  const handleColorBoxClick = () => {\n    const colorNow = changeColorRandom();\n    setColor(colorNow);\n    localStorage.setItem(\"color_box\", colorNow);\n  };\n  return (\n    <div\n      className=\"box\"\n      onClick={handleColorBoxClick}\n      style={{ backgroundColor: color }}\n    ></div>\n  );\n}\n","import \"./App.css\";\nimport TodoList from \"./component/TodoList/TodoList\";\nimport ClickMe from \"./component/ClickMe\";\nimport ColorBox from \"./component/ColorBox\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ClickMe />\n      <ColorBox />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}